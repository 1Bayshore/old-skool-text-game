x 	1. print exits when entering room
x 	2. Typing "look" starts with "You see" but long description doesn't match. Suggest drop "You see"
x 	3. don't print this player (e.g. "joe test") when looking in a room
x	4. Add support for default commands:
x		4a. exit verbs, e.g. "north" -> "go north"; "n" -> "go north", etc. Standard defaults are n, s, e, w, ne, nw, se, sw, u, d (up and down)
x		4b. "l" for "look"
x		4c. "look at" or "examine" -> print long description
x 	5. get rid of debug output on parser, or make a command ("verbose") to toggle debug output on and off
	6. ignore prepositions and articles
	7. objects have a list of names and list of adjectives, parser checks these to find a match, if more than one match parser asks "did you mean" and lists short descriptions of both
x	8. When describing a room (as opposed to other containers) don't print "it is empty" if nothing is there (because might contradict long description which may refer to "scenery" objects)
	9. adjectives and adverbs
x	10. implement "debug(x)" function that prints x if verbose is set, else passes
x	11. add exits to kitchen
x	12. fix cons.write
	13. "drop", "take", etc. break if no direct object (or mispelled DO)
	14. Consider making a special category for intransitive verbs (verbs that don't need a direct object, like "sneeze", "inventory", "south", etc). Otherwise need to guard every single verb with "if not oDO then: return"
	15. Consider making a class for "Verb" which has the string (and synonyms?), the function, and flags for things like whether verb can be transitive
x	16. Refactor code to put each class in a separate file
x		16a. Remove dependency on "cons" global Console object. Console is now passed to any function that uses it
x		16b. Move debug printouts to a new simple DebugLog class with no dependencies 
x		16c. Add debug logging to a file
	17. typing "go <exit>" doesn't give a failure message if <exit> doesn't exist.	
	18. when "take <obj>" should fail (e.g. obj is too heavy) it still extracts obj from its container, then fails to insert into the new container (the player), but still prints "you take the <obj>" 
x	19. Add alias system. So player can type e.g. "alias n north" and then just typing "n" is the same as typing "north". Then many default commands can just be implemented as built-in aliases
x	    19a. Basic alias system: replace single-word aliases with single-word commands
x		19b. Print instructions, pretty-print list of aliases if user just types "alias", etc.
x		19c. For extra credit, print list of aliases alphabetized by expansion, not alias (i.e. value not key of the alias_map) 
x		19d. Extend aliases to correctly handle multi-word expansions (e.g. "n" --> "go north"). Currently fails because "go north" appears as one word in Console.words[] list.
	21. Add NPCs that:
x		21a. Move around by picking exits at random
		21b. Respect safe-zone attribute on rooms 
		21c. Say various things (support both random comments and reading from a script)
		21d. Fight creatures they encounter, if they are aggressive
	22. Add combat system. After one or more heartbeat(s) fighters will attack with whatever weapon they wield. 
		22a. Add some new statistics for creatures and weapons/armor: 
			22a.1	Chance of hitting depends on armor class (AC) of defending creature, modified by armor
	 		22a.2 	Chance of hitting depends on skill of attacking creature, modified by weapon accuracy
			22a.3 	Damage upon hit depends on strength of attacker, modified by weapon damage.
			22a.4	Frequency of attacks (# of heartbeats between attacks) depends on attacker dexterity, modified by weapon unwieldiness
	23. Add "emit" and "perceive" semantics
x		23a. An object can "emit" or print a message that objects (like players) in the same room or holding the object will "perceive".
		23b. More efficient perceive: objects register with container/contained if they want to perceive emits
		23c. Recursive emits through containers: containers can set perceive_through flag (e.g. a birdcage vs a sack)
		23d. Darkness suppresses emits: setting dark flag prevents objects from seeing emit messages from other objects in the container 
	24. Fancier DebugLog class: 
		24a. Support multiple levels of verbosity
		24b. Support auto-indentation, auto-labeling module/class/function writing debug, etc.
	25. List contents of a room when you enter it (or at least any creatures)
	
 Parser description: 

First, the parser ignores or removes any articles ("a", "an", "the"). 
Next, the parser searches for prepositions to categorize the command (like 
diagramming a sentence). Here DO is "direct object", IDO is "indirect object", 
and prep is "preposition":
    1. intransitive-verb ("sneeze", "quit") 
    2. transitive-verb DO ("take bag", "attack goblin")
    3. transitive-verb DO prep IDO ("put sword on table", "put potion in bag")
Note that DO and IDO might consist of multiple words ("take rusty sword"). 
Eventually we could support more complex sentence structures like lists ("Take the 
red apple and the sword") or multipart sentences ("Tell the orc to drop the sword").

Once the sentence is parsed into verb, DO, prep, and IDO strings, the parser tries
to match an object to the DO and and IDO. Every object has a list of names and adjectives.
The parser loops through the objects in the player's inventory and (if it is not dark)
the room containing the player. It checks the final word in the DO/IDO string against 
each name of each object, building a list of possible matching nouns. (QUESTION: this 
assumes any adjectives always come before the noun. Will this always be the case?). 
For each noun found, it tries to match the other words to the adjectives supported by 
the object. If all the words in the DO/IDO string can be accounted for, the parser
adds the object to the list of possible nouns.

Next the parser tries to match the verb string to the list of nouns. Each noun 
has a list of transitive and intransitive verbs that it supports. (some verbs 
can be both transitive and intransitive). If a noun does not support the given verb,
it is removed from the list of possible DOs or IDOs.  It might make sense to create
an Action class which has a list of possible synonyms ("attack orc", "kill orc", "fight 
orc"), transitive/intransitive flags, and the function to call to enact the verb. Note that 
a verb might be supported by the DO or the IDO ("cook food on stove" where "cook" 
might be a verb supported by "stove"). (QUESTION: how to handle verbs that are "enabled"
by a local object but might commonly be used without naming the object, such as "cook
food" when a stove is present?)

When this process is done, the parser prints an error message if more than one object 
matches the DO or IDO string: 
    > swing sword
    Did you mean the rusty old sword or the gleaming vorpal sword?
    > 
IDEA: We might want to be able to "validate" verbs with a function that checks if the 
verb is applicable to the given noun but doesn't actually enact the action. For instance,
if the player was carrying the rusty sword and the gleaming sword was in the room, 
the parser should be smart enough to know that "swing sword" doesn't apply to the gleaming 
sword. In this case it would call validate() on each Verb object, and remove the noun 
from the DO/IDO list if validate() does not return True. If there is only one possible noun in 
the list, the parser should print an error message ("You can't swing the sword unless you
take it first") returned by validate().  Note that a verb may be valid even if enacting 
the verb would result in an error ("put sword in bag" is a valid sentence, even if the 
"put" verb will print "The sword doesn't fit!" when you actually try to enact it). Eventually 
we would also want to validate the IDO, but that also probably means validating the preposition 
in the context of the verb and the IDO ("put sword on table" versus "put sword in table"). 
This seems too complicated for now. 

Once we have a valid verb and (if applicable) an unambigious DO/IDO, the parser calls 
the verb function in the enabling object, passing as parameters the DO and IDO objects 
(and strings?) as well as the full text of the user's input (for any special processing).
The function should return True if the verb successfully "handles" the input (even if the 
result of the player's intended action was not successful, e.g. the player tried to put the 
sword in the bag but it was too small) or an error message if the verb was not successfully 
enacted because the construct did not make sense ("put sword beyond bag"). Eventually the 
parser could try other interpretations; for now it will just print the returned error 
message.   
